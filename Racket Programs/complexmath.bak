;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname complexmath) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #t)))
;;
;;************************************
;;   Anudeep Das (20782887)
;;   CS 135 Fall 2018
;;   Assignment 03, Problem 2
;;*************************************

;; PART A

;;(posn-mult posn1 posn2) calculates the product of two posns,
;;      and outputs it

;;posn-mult: Posn Posn -> Posn
;;requires: posn1 and posn2 must only have Num values

(check-expect (posn-mult (make-posn 1 1) (make-posn 1 1)) (make-posn 0 2))


(define (posn-mult posn1 posn2)
  (make-posn (-(*(posn-x posn1)(posn-x posn2)) (*(posn-y posn1) (posn-y posn2)))
             (+(*(posn-x posn1)(posn-y posn2)) (*(posn-x posn2) (posn-y posn1)))
  )
 )

(check-expect (posn-mult (make-posn 0 0) (make-posn 0 0)) (make-posn 0 0))
(check-expect (posn-mult (make-posn 3 4) (make-posn 0 1)) (make-posn -4 3))
(check-expect (posn-mult (make-posn -1 -1) (make-posn -1 -1)) (make-posn 0 2))
(check-expect (posn-mult (make-posn 1/3 1/2)(make-posn 1/2 -1/3))
              (make-posn 1/3 5/36))




;;PART B

;; (posn-div posn1 posn2) calcualtes the quotient of two posns

;; posn-div: Posn Posn -> Posn
;; requires: (posn-x posn2)cannot equal 0 when (posn-x posn2)=0
;;           and vice versa
;;           posn1 and posn2 must only have Num values

(check-expect (posn-div (make-posn 1 3) (make-posn 5 2))(make-posn 11/29 13/29))

(define (posn-div posn1 posn2)
  (make-posn(/ (+(*(posn-x posn1) (posn-x posn2))
                 (* (posn-y posn1) (posn-y posn2)))
            (+(sqr (posn-x posn2)) (sqr (posn-y posn2))))
            (/ (- (* (posn-y posn1) (posn-x posn2))
               (*(posn-x posn1)(posn-y posn2)))
            (+(sqr (posn-x posn2)) (sqr (posn-y posn2))))
            )
   )
  
(check-expect (posn-div (make-posn 2 3) (make-posn 1 2)) (make-posn 8/5 -1/5))
(check-expect (posn-div (make-posn 0 0) (make-posn 1 2)) (make-posn 0 0))
(check-expect (posn-div (make-posn -1 -1) (make-posn -1 -1)) (make-posn 1 0))
(check-expect (posn-div (make-posn 1/3 1/2)(make-posn 1/2 -1/3))
              (make-posn 0 1))




;;PART C

;;(posn-reciprocal posn1 posn2) determines the reciprocal of a posn
;; posn-reciprocal: Posn -> Posn
;; requires: (posn-x posn2) cannot equal 0 when (posn-x posn2)=0
;;           and vice versa
;;           posn1 and posn2 must only have Num values

(check-expect (posn-reciprocal (make-posn 1 1)) (make-posn 1/2 -1/2))

(define (posn-reciprocal position)
  (make-posn(/(posn-x position)
              (+ (sqr (posn-x position)) (sqr (posn-y position))))
            (/(* -1 (posn-y position))
              (+ (sqr (posn-x position))(sqr (posn-y position))))
            )
           )
  
(check-expect (posn-reciprocal (make-posn 1 0)) (make-posn 1 0))
(check-expect (posn-reciprocal (make-posn -1 -1)) (make-posn -1/2 1/2))
(check-expect (posn-reciprocal (make-posn 2 1)) (make-posn 2/5 -1/5))
(check-expect (posn-reciprocal (make-posn 1/3 1/2))
              (make-posn 0 1))


           
  


