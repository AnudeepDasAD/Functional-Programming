;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname match) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #t)))
;;
;;************************************
;;   Anudeep Das (20782887)
;;   CS 135 Fall 2018
;;   Assignment 08, Problem 5                                    
;;*************************************

(require "a08helpers.rkt")
(require "ranking.rkt")
(require "alf.rkt")

(define flat-employers '(("Manulife" "Anna" 1) ("Manulife" "Feisal" 2)
("Manulife" "Zihan" 2) ("Manulife" "Hannah" 2)
("Google" "Anna" 1) ("Google" "Feisal" 2)
("Google" "Rafelia" 2) ("Apple" "Rafelia" 1)
("Apple" "Zihan" 2) ("Apple" "Feisal" 3)))


(define emp-list3 '(("Google" (("Anudeep" 1) ("Pari" 1) ("Netra" 1)))
                    ("Apple"  (("Anudeep" 1) ("Pari" 1) ("Netra" 1)))
                    ("Facebook" (("Anudeep" 1) ("Pari" 1) ("Netra" 1)))
                    ("Amazon" (("Anudeep" 1) ("Pari" 1) ("Netra" 1)))))

(define ppl-list3 '(("Anudeep" (("Google" 1) ("Apple" 1) ("Facebook" 1) ("Amazon" 1)))
                    ("Pari" (("Google" 1) ("Apple" 1) ("Facebook" 1) ("Amazon" 1)))
                    ("Netra" (("Google" 1) ("Apple" 1) ("Facebook" 1) ("Amazon" 1)))))
                             

(define employees2 '(("Google" (("Anudeep" 1) ("Charles" 11)))
                     ("Citadel" (("Charles" 1) ("Anudeep" 2)))))

(define names2 '(("Anudeep" (("Google" 1) ("Citadel" 222)))
                 ("Charles" (("Google" 1) ("Citadel" 1)))))


(define single-emp '(("Google" (("Anudeep" 12)))))
(define single-person '(("Anudeep" (("Google" 1)))))

;; (sorter flat-list) sorts a flat-list by the summed pref in ascending order

;;sorter: FlatList -> FlatList

(check-expect (sorter flat-employers)
              (list
               (list "Manulife" "Anna" 1)
               (list "Google" "Anna" 1)
               (list "Apple" "Rafelia" 1)
               (list "Manulife" "Feisal" 2)
               (list "Manulife" "Zihan" 2)
               (list "Manulife" "Hannah" 2)
               (list "Google" "Feisal" 2)
               (list "Google" "Rafelia" 2)
               (list "Apple" "Zihan" 2)
               (list "Apple" "Feisal" 3)))

(define (sorter list)
  (quicksort list (lambda (person1 person2) (< (third person1) (third person2)))))
  



;;(pair-finder flat-list) finds the (list EmpID StdID Pref) with the lowest Pref,
;;  and then adds (list EmpID StdID) to a list, expunges that EmpID and StdID from
;;  the flat-list, and then recurses the function, repeating

;;pair-finder: FlatList -> (listof (list EmpID StdID))

(check-expect (pair-finder flat-employers)
              (list
               (list "Manulife" "Anna")
               (list "Apple" "Rafelia")
               (list "Google" "Feisal")))

(define (pair-finder list)
  (cond [(empty? list) empty]
        [else
         (local [(define best-pair (subsequence (first (sorter list)) 0 2))]
           (cons best-pair
                    (pair-finder (expunge list (first best-pair) (second best-pair)))))]))




;;(match employer student) finds the person (StdID) and employer (EmpID) that
;;   gets paired up, depending on the sum of their mutual perferences
;;   and a random number that is generated by (random-epsilon)

;;match: (listof EmpRanking) (listof StdRanking) -> (listof (list EmpID StdID))

(check-expect (match employers students)
              (list (list "Google" "Anna") (list "Apple" "Rafelia") (list "Manulife" "Zihan"))) 

(define (match employer student)
  (pair-finder (map (lambda (triplet) (list (first triplet) (second triplet)
                                            (+ (third triplet)
                                            (find-pref student (second triplet)(first triplet))
                   (random-epsilon (first triplet)(second triplet)))))
                    (unfold employer))))


(check-expect (match employers-my students-my)
              (list
               (list "Amazon" "Rafelia")
               (list "Manulife" "Anna")
               (list "Google" "Feisal")))

(check-expect (match employees2 names2)
              (list
               (list "Google" "Anudeep")
               (list "Citadel" "Charles")))

(check-expect (match single-emp single-person) (list (list "Google" "Anudeep")))

(check-expect (match emp-list3 ppl-list3)
              (list
               (list "Apple" "Pari")
               (list "Google" "Netra")
               (list "Amazon" "Anudeep")))


